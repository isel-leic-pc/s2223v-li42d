class SuspendSemaphore(initialPermits: Int) {
	private val mutex = ReentrantLock()
	private var currentPermits = initialPermits

	private class Request(
		val permits: Int,
		val continuation: Continuation<Unit>) {
		var done = false
	}
	private val waiters = LinkedList<Request>()

	suspend fun acquire(permits: Int, timeout: Duration) {
		// fast-path
		mutex.lock()
		if (currentPermits >= permits) {
			currentPermits -= permits
			mutex.unlock()
			return
		}
		
		// suspend-path
		suspendCancellableCoroutineWithTimeout(timeout) { cont ->
			val request = Request(permits, cont)
			waiters.add(request)
			mutex.unlock()
			
			cont->invokeOnCancellation { exc ->
				handleCancellation(exc, request)
			}
		}
	}

	fun release(permits: Int) {
		mutex.withLock {
			currentPermits += permits
			while (waiters.size() > 0 &&
			       currentPermits >= waiters.first.permits) {
				val request = waiters.removeFirst()
				request.done = true
				currentPermits -= request.permits
				request.continuation.resume(Unit) { ... } // What if... ?
				// 1. coroutine is cancelled ?
				// 2. is the continuation called directly ?
			}
		}
	}
	
	private fun handleCancellation(cause: Throwable?, request: Request) {
		mutex.withLock {
			if (!request.done) {
				waiters.remove(request)
			}
		}
	}
}
